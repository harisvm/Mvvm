package com.example.room_mvvm;import android.app.Application;import android.os.AsyncTask;import androidx.lifecycle.LiveData;import java.util.List;public class NoteRepository {    private NoteDao noteDao;    private LiveData<List<Note>> allNotes;    public NoteRepository(Application application) {        NoteDataBase dataBase = NoteDataBase.getInstance(application);        noteDao = dataBase.noteDao();        allNotes = (LiveData<List<Note>>) noteDao.getAllTasks();    }    public void insert(Note note) {        new InsertAsync(noteDao).execute(note);    }    public void update(Note note) {        new UpdateNoteAsync(noteDao).execute(note);    }    public void delete(Note note) {        new DeleteAsync(noteDao).execute(note);    }    public void deleteAllNotes() {        new DeleteAllAsync(noteDao).execute();    }    public LiveData<List<Note>> getAllNotes() {        return allNotes;    }    public class UpdateNoteAsync extends AsyncTask<Note, Void, Void> {        private NoteDao noteDao;        public UpdateNoteAsync(NoteDao noteDao) {            this.noteDao = noteDao;        }        @Override        protected Void doInBackground(Note... notes) {            noteDao.updateNote(notes[0]);            return null;        }    }    public class DeleteAsync extends AsyncTask<Note, Void, Void> {        private NoteDao noteDao;        public DeleteAsync(NoteDao noteDao) {            this.noteDao = noteDao;        }        @Override        protected Void doInBackground(Note... notes) {            noteDao.deleteNote(notes[0]);            return null;        }    }    public class DeleteAllAsync extends AsyncTask<Note, Void, Void> {        private NoteDao noteDao;        public DeleteAllAsync(NoteDao noteDao) {            this.noteDao = noteDao;        }        @Override        protected Void doInBackground(Note... notes) {            noteDao.deleteAll();            return null;        }    }    public class InsertAsync extends AsyncTask<Note, Void, Void> {        private NoteDao noteDao;        public InsertAsync(NoteDao noteDao) {            this.noteDao = noteDao;        }        @Override        protected Void doInBackground(Note... notes) {            noteDao.insertNote(notes[0]);            return null;        }    }}